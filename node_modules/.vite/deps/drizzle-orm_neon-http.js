import {
  DefaultLogger,
  NoopLogger
} from "./chunk-7C4LS56F.js";
import {
  export_types
} from "./chunk-BXQSFB64.js";
import {
  PgDatabase,
  PgDialect,
  PgPreparedQuery,
  PgSession,
  PgTransaction
} from "./chunk-ABSFFKIW.js";
import {
  createTableRelationsHelpers,
  entityKind,
  extractTablesRelationalConfig,
  fillPlaceholders,
  mapResultRow
} from "./chunk-YMSKDCLI.js";
import {
  __publicField
} from "./chunk-2TUXWMP5.js";

// node_modules/drizzle-orm/neon-http/session.js
var rawQueryConfig = {
  arrayMode: false,
  fullResults: true
};
var queryConfig = {
  arrayMode: true,
  fullResults: true
};
var _a, _b;
var NeonHttpPreparedQuery = class extends (_b = PgPreparedQuery, _a = entityKind, _b) {
  constructor(client, query, logger, fields, customResultMapper) {
    super(query);
    this.client = client;
    this.logger = logger;
    this.fields = fields;
    this.customResultMapper = customResultMapper;
  }
  async execute(placeholderValues = {}) {
    const params = fillPlaceholders(this.query.params, placeholderValues);
    this.logger.logQuery(this.query.sql, params);
    const { fields, client, query, customResultMapper } = this;
    if (!fields && !customResultMapper) {
      return client(query.sql, params, rawQueryConfig);
    }
    const result = await client(query.sql, params, queryConfig);
    return this.mapResult(result);
  }
  mapResult(result) {
    if (!this.fields && !this.customResultMapper) {
      return result;
    }
    const rows = result.rows;
    if (this.customResultMapper) {
      return this.customResultMapper(rows);
    }
    return rows.map((row) => mapResultRow(this.fields, row, this.joinsNotNullableMap));
  }
  all(placeholderValues = {}) {
    const params = fillPlaceholders(this.query.params, placeholderValues);
    this.logger.logQuery(this.query.sql, params);
    return this.client(this.query.sql, params, rawQueryConfig).then((result) => result.rows);
  }
  values(placeholderValues = {}) {
    const params = fillPlaceholders(this.query.params, placeholderValues);
    this.logger.logQuery(this.query.sql, params);
    return this.client(this.query.sql, params).then((result) => result.rows);
  }
};
__publicField(NeonHttpPreparedQuery, _a, "NeonHttpPreparedQuery");
var _a2, _b2;
var NeonHttpSession = class extends (_b2 = PgSession, _a2 = entityKind, _b2) {
  constructor(client, dialect, schema, options = {}) {
    super(dialect);
    __publicField(this, "logger");
    this.client = client;
    this.schema = schema;
    this.options = options;
    this.logger = options.logger ?? new NoopLogger();
  }
  prepareQuery(query, fields, name, customResultMapper) {
    return new NeonHttpPreparedQuery(
      this.client,
      query,
      this.logger,
      fields,
      customResultMapper
    );
  }
  async batch(queries) {
    const preparedQueries = [];
    const builtQueries = [];
    for (const query of queries) {
      const preparedQuery = query._prepare();
      const builtQuery = preparedQuery.getQuery();
      preparedQueries.push(preparedQuery);
      builtQueries.push(this.client(builtQuery.sql, builtQuery.params));
    }
    const batchResults = await this.client.transaction(builtQueries, queryConfig);
    return batchResults.map((result, i) => preparedQueries[i].mapResult(result, true));
  }
  // change return type to QueryRows<true>
  async query(query, params) {
    this.logger.logQuery(query, params);
    const result = await this.client(query, params, { arrayMode: true });
    return result;
  }
  // change return type to QueryRows<false>
  async queryObjects(query, params) {
    return this.client(query, params);
  }
  async transaction(_transaction, _config = {}) {
    throw new Error("No transactions support in neon-http driver");
  }
};
__publicField(NeonHttpSession, _a2, "NeonHttpSession");
var _a3, _b3;
var NeonTransaction = class extends (_b3 = PgTransaction, _a3 = entityKind, _b3) {
  async transaction(_transaction) {
    throw new Error("No transactions support in neon-http driver");
  }
};
__publicField(NeonTransaction, _a3, "NeonHttpTransaction");

// node_modules/drizzle-orm/neon-http/driver.js
var _a4;
_a4 = entityKind;
var NeonHttpDriver = class {
  constructor(client, dialect, options = {}) {
    this.client = client;
    this.dialect = dialect;
    this.options = options;
    this.initMappers();
  }
  createSession(schema) {
    return new NeonHttpSession(this.client, this.dialect, schema, { logger: this.options.logger });
  }
  initMappers() {
    export_types.setTypeParser(export_types.builtins.TIMESTAMPTZ, (val) => val);
    export_types.setTypeParser(export_types.builtins.TIMESTAMP, (val) => val);
    export_types.setTypeParser(export_types.builtins.DATE, (val) => val);
  }
};
__publicField(NeonHttpDriver, _a4, "NeonDriver");
var _a5, _b4;
var NeonHttpDatabase = class extends (_b4 = PgDatabase, _a5 = entityKind, _b4) {
  async batch(batch) {
    return this.session.batch(batch);
  }
};
__publicField(NeonHttpDatabase, _a5, "NeonHttpDatabase");
function drizzle(client, config = {}) {
  const dialect = new PgDialect();
  let logger;
  if (config.logger === true) {
    logger = new DefaultLogger();
  } else if (config.logger !== false) {
    logger = config.logger;
  }
  let schema;
  if (config.schema) {
    const tablesConfig = extractTablesRelationalConfig(
      config.schema,
      createTableRelationsHelpers
    );
    schema = {
      fullSchema: config.schema,
      schema: tablesConfig.tables,
      tableNamesMap: tablesConfig.tableNamesMap
    };
  }
  const driver = new NeonHttpDriver(client, dialect, { logger });
  const session = driver.createSession(schema);
  return new NeonHttpDatabase(
    dialect,
    session,
    schema
  );
}
export {
  NeonHttpDatabase,
  NeonHttpDriver,
  NeonHttpPreparedQuery,
  NeonHttpSession,
  NeonTransaction,
  drizzle
};
//# sourceMappingURL=drizzle-orm_neon-http.js.map
